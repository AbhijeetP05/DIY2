// Code generated by MockGen. DO NOT EDIT.
// Source: DIY2/models (interfaces: IProductRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	models "DIY2/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockIProductRepo is a mock of IProductRepo interface.
type MockIProductRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIProductRepoMockRecorder
}

// MockIProductRepoMockRecorder is the mock recorder for MockIProductRepo.
type MockIProductRepoMockRecorder struct {
	mock *MockIProductRepo
}

// NewMockIProductRepo creates a new mock instance.
func NewMockIProductRepo(ctrl *gomock.Controller) *MockIProductRepo {
	mock := &MockIProductRepo{ctrl: ctrl}
	mock.recorder = &MockIProductRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProductRepo) EXPECT() *MockIProductRepoMockRecorder {
	return m.recorder
}

// CreateProduct mocks base method.
func (m *MockIProductRepo) CreateProduct(arg0 *models.ProductModel) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", arg0)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockIProductRepoMockRecorder) CreateProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockIProductRepo)(nil).CreateProduct), arg0)
}

// DeleteProduct mocks base method.
func (m *MockIProductRepo) DeleteProduct(arg0 *models.ProductModel) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", arg0)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockIProductRepoMockRecorder) DeleteProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockIProductRepo)(nil).DeleteProduct), arg0)
}

// GetProduct mocks base method.
func (m *MockIProductRepo) GetProduct(arg0 *models.ProductModel) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", arg0)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockIProductRepoMockRecorder) GetProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockIProductRepo)(nil).GetProduct), arg0)
}

// GetProducts mocks base method.
func (m *MockIProductRepo) GetProducts(arg0 *models.ProductModel, arg1, arg2 int) ([]models.ProductModel, *gorm.DB) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.ProductModel)
	ret1, _ := ret[1].(*gorm.DB)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockIProductRepoMockRecorder) GetProducts(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockIProductRepo)(nil).GetProducts), arg0, arg1, arg2)
}

// UpdateProduct mocks base method.
func (m *MockIProductRepo) UpdateProduct(arg0, arg1 *models.ProductModel) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", arg0, arg1)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockIProductRepoMockRecorder) UpdateProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockIProductRepo)(nil).UpdateProduct), arg0, arg1)
}
