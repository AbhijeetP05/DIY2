// Code generated by MockGen. DO NOT EDIT.
// Source: go-mux/services (interfaces: IProducts)

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIProducts is a mock of IProducts interface.
type MockIProducts struct {
	ctrl     *gomock.Controller
	recorder *MockIProductsMockRecorder
}

// MockIProductsMockRecorder is the mock recorder for MockIProducts.
type MockIProductsMockRecorder struct {
	mock *MockIProducts
}

// NewMockIProducts creates a new mock instance.
func NewMockIProducts(ctrl *gomock.Controller) *MockIProducts {
	mock := &MockIProducts{ctrl: ctrl}
	mock.recorder = &MockIProductsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProducts) EXPECT() *MockIProductsMockRecorder {
	return m.recorder
}

// CreateProduct mocks base method.
func (m *MockIProducts) CreateProduct(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateProduct", arg0, arg1)
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockIProductsMockRecorder) CreateProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockIProducts)(nil).CreateProduct), arg0, arg1)
}

// DeleteProduct mocks base method.
func (m *MockIProducts) DeleteProduct(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteProduct", arg0, arg1)
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockIProductsMockRecorder) DeleteProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockIProducts)(nil).DeleteProduct), arg0, arg1)
}

// GetProduct mocks base method.
func (m *MockIProducts) GetProduct(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetProduct", arg0, arg1)
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockIProductsMockRecorder) GetProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockIProducts)(nil).GetProduct), arg0, arg1)
}

// GetProducts mocks base method.
func (m *MockIProducts) GetProducts(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetProducts", arg0, arg1)
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockIProductsMockRecorder) GetProducts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockIProducts)(nil).GetProducts), arg0, arg1)
}

// UpdateProduct mocks base method.
func (m *MockIProducts) UpdateProduct(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateProduct", arg0, arg1)
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockIProductsMockRecorder) UpdateProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockIProducts)(nil).UpdateProduct), arg0, arg1)
}
