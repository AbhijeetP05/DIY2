// Code generated by MockGen. DO NOT EDIT.
// Source: DIY2/models (interfaces: IStoreRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	models "DIY2/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIStoreRepo is a mock of IStoreRepo interface.
type MockIStoreRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIStoreRepoMockRecorder
}

// MockIStoreRepoMockRecorder is the mock recorder for MockIStoreRepo.
type MockIStoreRepoMockRecorder struct {
	mock *MockIStoreRepo
}

// NewMockIStoreRepo creates a new mock instance.
func NewMockIStoreRepo(ctrl *gomock.Controller) *MockIStoreRepo {
	mock := &MockIStoreRepo{ctrl: ctrl}
	mock.recorder = &MockIStoreRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStoreRepo) EXPECT() *MockIStoreRepoMockRecorder {
	return m.recorder
}

// AddProducts mocks base method.
func (m *MockIStoreRepo) AddProducts(arg0 *models.StoreModel, arg1 []models.ProductModel) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProducts", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AddProducts indicates an expected call of AddProducts.
func (mr *MockIStoreRepoMockRecorder) AddProducts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProducts", reflect.TypeOf((*MockIStoreRepo)(nil).AddProducts), arg0, arg1)
}

// GetAllStores mocks base method.
func (m *MockIStoreRepo) GetAllStores(arg0 *models.StoreModel) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllStores", arg0)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllStores indicates an expected call of GetAllStores.
func (mr *MockIStoreRepoMockRecorder) GetAllStores(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllStores", reflect.TypeOf((*MockIStoreRepo)(nil).GetAllStores), arg0)
}

// GetProductsInStore mocks base method.
func (m *MockIStoreRepo) GetProductsInStore(arg0 *models.StoreModel, arg1, arg2 int) []models.ProductModel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsInStore", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.ProductModel)
	return ret0
}

// GetProductsInStore indicates an expected call of GetProductsInStore.
func (mr *MockIStoreRepoMockRecorder) GetProductsInStore(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsInStore", reflect.TypeOf((*MockIStoreRepo)(nil).GetProductsInStore), arg0, arg1, arg2)
}

// ProductExists mocks base method.
func (m *MockIStoreRepo) ProductExists(arg0 *models.StoreModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProductExists", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProductExists indicates an expected call of ProductExists.
func (mr *MockIStoreRepoMockRecorder) ProductExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductExists", reflect.TypeOf((*MockIStoreRepo)(nil).ProductExists), arg0)
}
